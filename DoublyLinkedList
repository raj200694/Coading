package com.in;

public class DoublyLinkedList {
	
	Node head;
	
	class Node{  
        int data;  
        Node previous;  
        Node next;  
   
        public Node(int item) {  
            this.data = item;  
        }

		public Node() {
		}  
    } 
	public void addFront(int new_data)
	{
	    Node new_Node = new Node(new_data);
	 
	    new_Node.next = head;
	    new_Node.previous = null;
	 
	    if (head != null)
	        head.previous = new_Node;
	 
	    head = new_Node;
	}	
	
	void addEnd(int new_data)
	{
		Node newNode = new Node();
	    newNode.data = new_data;
	    newNode.next = null;
	    newNode.previous = null; 
	    if(head == null) {
	      head = newNode;
	    } else {
	      Node temp = new Node();
	      temp = head;
	      while(temp.next != null)
	        temp = temp.next;
	      temp.next = newNode;
	      newNode.previous = temp;
	    }   
	}
	void addAtPosition(int newElement, int position) {     
	    Node newNode = new Node(); 
	    newNode.data = newElement;
	    newNode.next = null;
	    newNode.previous = null;
	    if(position < 1) {
	      System.out.print("\nposition should be >= 1.");
	    } else if (position == 1) {
	      newNode.next = head;
	      head.previous = newNode;
	      head = newNode;
	    } else {
	      Node temp = new Node();
	      temp = head;
	      for(int i = 1; i < position-1; i++) {
	        if(temp != null) {
	          temp = temp.next;
	        }
	      }
	      if(temp != null) {
	        newNode.next = temp.next;
	        newNode.previous = temp;
	        temp.next = newNode;  
	        if(newNode.next != null)
	          newNode.next.previous = newNode;
	      } else {
	        System.out.print("\nThe previous node is null.");
	      }       
	    }
	  } 
	
	 public void printlist(){
		 
		 Node temp = new Node();
		    temp = this.head;
		    if(temp != null) {
		      System.out.print("The list contains: ");
		      while(temp != null) {
		        System.out.print(temp.data + " ");
		        temp = temp.next;
		      }
		      System.out.println();
		    } else {
		      System.out.println("The list is empty.");
		    }
		    
	 }    
	    
	 
	public  void remove_front() {
		    if(this.head != null) {
		      Node temp = this.head;
		      this.head = this.head.next;
		      temp = null;
		      if(this.head != null) 
		        this.head.previous = null;
		    }
		  }
	 
	public void remove_end() {
		    if(this.head != null) {
		      if(this.head.next == null) {
		        this.head = null;
		      } else {
		        Node temp = new Node();
		        temp = this.head;
		        while(temp.next.next != null)
		          temp = temp.next;
		        Node lastNode = temp.next;
		        temp.next = null; 
		        lastNode = null;
		      }
		    }
		  }
	 
	 
	 public void removeNodeAtPosition(int position)
	    {
	        if (head == null || position <= 0)
	            return;
	        Node current = head;
	        int i;
	        for (i = 1; current != null && i < position; i++)
	        {
	            current = current.next;
	        }
	        if (current == null)
	            return;
	        if (head == current)
	            head = current.next;
	        if (current.next != null)
	        	current.next.previous = current.previous;
	 
	        if (current.previous != null)
	        	current.previous.next = current.next;
	 
	        current = null;
	    }
	public  int findNode( int x)
	  {
	    Node temp = head;
	    int pos = 0;
	    while (temp.data != x
	               && temp.next != null)
	    {
	      pos++;
	      temp = temp.next;
	    }
	    if (temp.data != x)
	      return -1;
	   
	    return (pos + 1);
	  }
	
	void addNode(int value) {

		Node newNode = new Node();
	    newNode.data = value;
	    newNode.next = null;
	    newNode.previous = null; 
	    if(head == null) {
	      head = newNode;
	    } else {
	      Node temp = new Node();
	      temp = head;
	      while(temp.next != null)
	        temp = temp.next;
	      temp.next = newNode;
	      newNode.previous = temp;
	    }    
	}  
}
